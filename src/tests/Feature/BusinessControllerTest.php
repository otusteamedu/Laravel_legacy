<?php

namespace Tests\Feature;

use App\Models\Business;
use App\Models\User;
use App\Models\UserRole;
use Illuminate\Support\Str;
use Illuminate\Foundation\Testing\RefreshDatabase;

/**
 * Class BusinessControllerTest
 * @package Tests\Feature
 * @group BusinessController
 */
class BusinessControllerTest extends TestHelper
{
    use RefreshDatabase;

    /**
     * Имя таблицы
     */
    const TABLE_NAME = 'businesses';

    /**
     * @var User
     */
    private $user;

    /**
     * Страница добавления записи
     */
    public function testCreateView()
    {
        $response = $this->get(route('business.create'));

        $response->assertStatus(200);
    }

    /**
     * Главная страница
     */
    public function testIndexView()
    {
        $this->getBusiness($this->user);

        $response = $this->get(route('business.index'));

        $response->assertStatus(200);
    }

    /**
     * Страница редактирования
     */
    public function testEditView()
    {
        $business = $this->getBusiness($this->user);

        $response = $this->get(route('business.edit', ['business' => $business->id]));

        $response->assertStatus(200);
    }

    /**
     * Ошибка, страница редактирования без салона
     */
    public function testErrorEditDontMyBusiness()
    {
        $business = factory(Business::class)->create();

        $response = $this->get(route('business.edit', ['business' => $business->id]));

        $response->assertStatus(403);
    }

    /**
     * Ошибка, страница без салона
     */
    public function testErrorIndexWithoutBusiness()
    {
        $response = $this->get(route('business.index'));

        $response->assertStatus(403);
    }

    /**
     * Проверка заполнения формы
     * @dataProvider getStoreRequestData
     * @param array $data
     * @param string $hasError
     */
    public function testErrorsStore(array $data, string $hasError)
    {
        $response = $this->post(route('business.store'), $data);

        $response->assertSessionHasErrors($hasError);
        $this->assertDatabaseMissing(self::TABLE_NAME, $data);
    }

    /**
     * Добавление записи
     */
    public function testStore()
    {
        $data = [
            'name' => Str::random(30),
            'type_id' => $this->getBusinessType()->id,
        ];

        $this->assertDatabaseMissing('businesses', $data);
        $response = $this->post(route('business.store'), $data);
        $response->assertSessionHasNoErrors();

        $this->assertDatabaseHas(self::TABLE_NAME, $data);
    }

    /**
     * Обновление данных
     */
    public function testUpdate()
    {
        $business = $this->getBusiness($this->user);
        $data_old = [
            'name' => $business->name,
            'type_id' => $business->type_id,
        ];
        $data_new = [
            'name' => Str::random(30),
            'type_id' => $this->getBusinessType()->id,
        ];

        $this->assertDatabaseHas(self::TABLE_NAME, $data_old);
        $response = $this->patch(route('business.update', ['business' => $business->id]), $data_new);
        $response->assertStatus(302);

        $this->assertDatabaseMissing(self::TABLE_NAME, $data_old);
        $this->assertDatabaseHas(self::TABLE_NAME, $data_new);
        $response->assertRedirect(route('business.index'));
    }

    /**
     * Удаление записи
     */
    public function testDelete()
    {
        $business_id = $this->getBusiness($this->user)->id;

        $response = $this->delete(route('business.destroy', ['business' => $business_id]));

        $this->assertDatabaseMissing(self::TABLE_NAME, ['id' => $business_id]);
        $response->assertRedirect(route('home'));
    }

    /**
     * Ошибка удаления чужой записи
     */
    public function testErrorDeleteDontMyBusiness()
    {
        $business = factory(Business::class)->create();

        $response = $this->delete(route('business.destroy', ['business' => $business->id]));

        $this->assertDatabaseHas(self::TABLE_NAME, ['id' => $business->id]);
        $response->assertStatus(403);
    }

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $role = factory(UserRole::class)->create();
        $this->user = factory(User::class)->create([
            'user_role_id' => $role->id
        ]);

        $this->actingAs($this->user);
    }

    /**
     * Данные для проверки на ошибки заполнения формы
     * @return array
     */
    public function getStoreRequestData()
    {
        $data = [
            'name' => Str::random(30),
            'type_id' => 1,
        ];

        return [
            [
                [
                    'name' => $data['name'],
                ],
                'type_id',
            ],
            [
                [
                    'type_id' => $data['type_id'],
                ],
                'name',
            ],
            [
                [
                    'name' => Str::random(160),
                    'type_id' => $data['type_id'],
                ],
                'name',
            ],
        ];
    }
}
