Single responsibility principle

Маркеры
• У класса много зависимостей (стоит if >3 then ‘стоит стоит подумать’)
: Вроде не много

• У метода много параметров
: У моих методов параметров не много. У API битрикс многовато

• Документация (из имени пакета и класса непонятна зона ответственности)
: Не так что сразу понятьно, но отражает суть

• Эффект снежного кома 
: Может быть всякое. Если методов выборки станет много то и кода станет больше

Open/closed principle
Создаем интерфейс ( closed ), расширение – через создания новых сущностей
: Подход применим 

Liskov substitution principle
• Объекты в программе могут быть заменены наследниками без изменения свойств программы
: В примере есть GET и POST методы. Для GET методов RestApiBase общий, а для POST будуд допролнительные методы. Их можно вынести дополнительный класс, который будет наледовать ся от RestApiBase.

Interface segregation principle
• Методы интерфейса должны быть сильно сцеплены. Иными словами: много небольших интерфейсов лучше, чем один универсальный
: Без интерфейсов еще

Dependency inversion principle
:Не инжектировал

Inversion Of Control (стоит IoC)
:Не применял.

